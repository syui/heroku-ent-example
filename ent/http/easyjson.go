// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeTEntHttp(in *jlexer.Lexer, out *ItemUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp(out *jwriter.Writer, in ItemUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp1(in *jlexer.Lexer, out *ItemCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp1(out *jwriter.Writer, in ItemCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp1(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp2(in *jlexer.Lexer, out *Item1548468123Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Item1548468123Views, 0, 8)
			} else {
				*out = Item1548468123Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Item1548468123View
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Item1548468123View)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp2(out *jwriter.Writer, in Item1548468123Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item1548468123Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item1548468123Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp2(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp3(in *jlexer.Lexer, out *Item1548468123View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp3(out *jwriter.Writer, in Item1548468123View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item1548468123View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item1548468123View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp3(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp4(in *jlexer.Lexer, out *FridgeUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp4(out *jwriter.Writer, in FridgeUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FridgeUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FridgeUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp4(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp5(in *jlexer.Lexer, out *FridgeCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp5(out *jwriter.Writer, in FridgeCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FridgeCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FridgeCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp5(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp6(in *jlexer.Lexer, out *Fridge2211356377Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Fridge2211356377Views, 0, 8)
			} else {
				*out = Fridge2211356377Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *Fridge2211356377View
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(Fridge2211356377View)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp6(out *jwriter.Writer, in Fridge2211356377Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fridge2211356377Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fridge2211356377Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp6(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp7(in *jlexer.Lexer, out *Fridge2211356377View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp7(out *jwriter.Writer, in Fridge2211356377View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fridge2211356377View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fridge2211356377View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp7(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp8(in *jlexer.Lexer, out *ErrResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "status":
			out.Status = string(in.String())
		case "errors":
			if m, ok := out.Errors.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Errors.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Errors = in.Interface()
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp8(out *jwriter.Writer, in ErrResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Errors != nil {
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		if m, ok := in.Errors.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Errors.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Errors))
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp8(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp9(in *jlexer.Lexer, out *EntryUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp9(out *jwriter.Writer, in EntryUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntryUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntryUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp9(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp10(in *jlexer.Lexer, out *EntryCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(string)
				}
				*out.User = string(in.String())
			}
		case "first":
			if in.IsNull() {
				in.Skip()
				out.First = nil
			} else {
				if out.First == nil {
					out.First = new(int)
				}
				*out.First = int(in.Int())
			}
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp10(out *jwriter.Writer, in EntryCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.User))
		}
	}
	{
		const prefix string = ",\"first\":"
		out.RawString(prefix)
		if in.First == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.First))
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		if in.CreatedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreatedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntryCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntryCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp10(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp11(in *jlexer.Lexer, out *Entry2675665849Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Entry2675665849Views, 0, 8)
			} else {
				*out = Entry2675665849Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 *Entry2675665849View
			if in.IsNull() {
				in.Skip()
				v7 = nil
			} else {
				if v7 == nil {
					v7 = new(Entry2675665849View)
				}
				(*v7).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp11(out *jwriter.Writer, in Entry2675665849Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			if v9 == nil {
				out.RawString("null")
			} else {
				(*v9).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entry2675665849Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entry2675665849Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp11(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp12(in *jlexer.Lexer, out *Entry2675665849View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user":
			out.User = string(in.String())
		case "first":
			out.First = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp12(out *jwriter.Writer, in Entry2675665849View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.First != 0 {
		const prefix string = ",\"first\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.First))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entry2675665849View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entry2675665849View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp12(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp13(in *jlexer.Lexer, out *CompartmentUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp13(out *jwriter.Writer, in CompartmentUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompartmentUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompartmentUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp13(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp14(in *jlexer.Lexer, out *CompartmentCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp14(out *jwriter.Writer, in CompartmentCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompartmentCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompartmentCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp14(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp15(in *jlexer.Lexer, out *Compartment3324871446Views) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Compartment3324871446Views, 0, 8)
			} else {
				*out = Compartment3324871446Views{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 *Compartment3324871446View
			if in.IsNull() {
				in.Skip()
				v10 = nil
			} else {
				if v10 == nil {
					v10 = new(Compartment3324871446View)
				}
				(*v10).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp15(out *jwriter.Writer, in Compartment3324871446Views) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			if v12 == nil {
				out.RawString("null")
			} else {
				(*v12).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Compartment3324871446Views) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Compartment3324871446Views) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp15(l, v)
}
func easyjsonC5a4559bDecodeTEntHttp16(in *jlexer.Lexer, out *Compartment3324871446View) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeTEntHttp16(out *jwriter.Writer, in Compartment3324871446View) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Compartment3324871446View) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeTEntHttp16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Compartment3324871446View) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeTEntHttp16(l, v)
}
