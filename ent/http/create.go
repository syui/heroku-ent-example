// Code generated by entc, DO NOT EDIT.

package http

import (
	"heroku-ent-example/ent"
	"heroku-ent-example/ent/pet"
	"heroku-ent-example/ent/user"
	"encoding/json"
	"net/http"

	"github.com/go-playground/validator/v10"
	"github.com/liip/sheriff"
	"github.com/masseelch/render"
	"go.uber.org/zap"
	"time"
	//"math/rand"
)
var layout = "2006-01-02 15:04:05"

type PetCreateRequest struct {
	Name  *string `json:"name"`
	Age   *int    `json:"age"`
	//Age   *int    `json:"age" validate:"required,gt=0"`
	Owner *int    `json:"owner" validate:"required"`
}

func (h PetHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	var d PetCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.Pet.Create()
	if d.Name != nil {
		b.SetName(*d.Name).OnConflict()
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Owner != nil {
		b.SetOwnerID(*d.Owner)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving pet", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching pet from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"pet"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pet rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}

type UserCreateRequest struct {
	Name *string `json:"name" validate:"required"`
	Age  *int    `json:"age"`
	Card  *int    `json:"card"`
	//CreatedAt time `json:"created_at,omitempty"`
	//UpdatedAt time `json:"updated_at,omitempty"`
	CreatedAt time.Time
	UpdatedAt time.Time
	Pets []int   `json:"pets"`
}

func (h UserHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	var d UserCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	b := h.client.User.Create()
	if d.Name != nil {
		b.SetName(*d.Name).OnConflict()
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}

	if d.Pets != nil {
		b.AddPetIDs(d.Pets...)
	}

	//r = rand.Intn(20)
	//b.Card(*d.r)
	//b.SetUpdatedAt(time.Now)
	//b.SetCreatedAt(time.Now)
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving user", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	q := h.client.User.Query().Where(user.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching user from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"user"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("user rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}
